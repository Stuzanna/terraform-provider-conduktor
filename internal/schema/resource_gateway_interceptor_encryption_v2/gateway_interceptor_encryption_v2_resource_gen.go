// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_gateway_interceptor_encryption_v2

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func GatewayInterceptorEncryptionV2ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the interceptor, must be unique, act as ID for import",
				MarkdownDescription: "The name of the interceptor, must be unique, act as ID for import",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]{3,64}$"), ""),
				},
			},
		},
		Blocks: map[string]schema.Block{
			"scope": schema.SingleNestedBlock{
				Attributes: map[string]schema.Attribute{
					"group": schema.StringAttribute{
						Optional:            true,
						Description:         "The name of the group the interceptor will be applied to. Optional parameter to helps defining the scope",
						MarkdownDescription: "The name of the group the interceptor will be applied to. Optional parameter to helps defining the scope",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
						},
					},
					"username": schema.StringAttribute{
						Optional:            true,
						Description:         "The username the interceptor will be applied to. Optional parameter to helps defining the scope",
						MarkdownDescription: "The username the interceptor will be applied to. Optional parameter to helps defining the scope",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
						},
					},
					"vcluster": schema.StringAttribute{
						Optional:            true,
						Description:         "The name of the virtual cluster the interceptor will be applied to. Optional parameter to help defining the scope",
						MarkdownDescription: "The name of the virtual cluster the interceptor will be applied to. Optional parameter to help defining the scope",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
						},
					},
				},
				CustomType: ScopeType{
					ObjectType: types.ObjectType{
						AttrTypes: ScopeValue{}.AttributeTypes(ctx),
					},
				},
			},
			"spec": schema.SingleNestedBlock{
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						Optional:            true,
						Description:         "An optional comment for the interceptor.",
						MarkdownDescription: "An optional comment for the interceptor.",
					},
					"config": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"enable_audit_log_on_error": schema.BoolAttribute{
								Optional:            true,
								Description:         "Flag to enable audit log when error happens.",
								MarkdownDescription: "Flag to enable audit log when error happens.",
							},
							"external_storage": schema.BoolAttribute{
								Optional:            true,
								Description:         "Flag to store encryption settings externally in a topic.",
								MarkdownDescription: "Flag to store encryption settings externally in a topic.",
							},
							"schema_data_mode": schema.StringAttribute{
								Optional:            true,
								Computed:            true,
								Description:         "Defines whether to preserve Avro schema format or convert to JSON.",
								MarkdownDescription: "Defines whether to preserve Avro schema format or convert to JSON.",
								Default:             stringdefault.StaticString("preserve_avro"),
							},
							"schema_registry_config": schema.MapNestedAttribute{
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"additional_configs": schema.MapAttribute{
											ElementType:         types.StringType,
											Optional:            true,
											Description:         "Additional properties mapped to specific security-related parameters. For enhanced security, use environment variable templates like ${MY_ENV_VAR}.",
											MarkdownDescription: "Additional properties mapped to specific security-related parameters. For enhanced security, use environment variable templates like ${MY_ENV_VAR}.",
										},
										"cache_size": schema.Int64Attribute{
											Optional:            true,
											Computed:            true,
											Description:         "This interceptor caches schemas locally so that it doesn't have to query the schema registry.",
											MarkdownDescription: "This interceptor caches schemas locally so that it doesn't have to query the schema registry.",
											Default:             int64default.StaticInt64(100),
										},
										"host": schema.StringAttribute{
											Required:            true,
											Description:         "URL of the schema registry.",
											MarkdownDescription: "URL of the schema registry.",
										},
									},
									CustomType: SchemaRegistryConfigType{
										ObjectType: types.ObjectType{
											AttrTypes: SchemaRegistryConfigValue{}.AttributeTypes(ctx),
										},
									},
								},
								Optional:            true,
								Description:         "Configuration for Schema Registry to handle Avro, JSON, and Protobuf records.",
								MarkdownDescription: "Configuration for Schema Registry to handle Avro, JSON, and Protobuf records.",
							},
							"topic": schema.StringAttribute{
								Optional:            true,
								Computed:            true,
								Description:         "Topics that match this regex will have the interceptor applied. Defaults to all.",
								MarkdownDescription: "Topics that match this regex will have the interceptor applied. Defaults to all.",
								Default:             stringdefault.StaticString(".*"),
							},
						},
						CustomType: ConfigType{
							ObjectType: types.ObjectType{
								AttrTypes: ConfigValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
					},
					"plugin_class": schema.StringAttribute{
						Optional:            true,
						Description:         "The class of the plugin",
						MarkdownDescription: "The class of the plugin",
					},
					"priority": schema.Int64Attribute{
						Optional:            true,
						Description:         "The priority of the interceptor. Must be bigger than 0",
						MarkdownDescription: "The priority of the interceptor. Must be bigger than 0",
						Validators: []validator.Int64{
							int64validator.Between(1, 2147483647),
						},
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
			},
		},
	}
}

type GatewayInterceptorEncryptionV2Model struct {
	Name  types.String `tfsdk:"name"`
	Scope ScopeValue   `tfsdk:"scope"`
	Spec  SpecValue    `tfsdk:"spec"`
}

var _ basetypes.ObjectTypable = ScopeType{}

type ScopeType struct {
	basetypes.ObjectType
}

func (t ScopeType) Equal(o attr.Type) bool {
	other, ok := o.(ScopeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ScopeType) String() string {
	return "ScopeType"
}

func (t ScopeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	vclusterAttribute, ok := attributes["vcluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcluster is missing from object`)

		return nil, diags
	}

	vclusterVal, ok := vclusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcluster expected to be basetypes.StringValue, was: %T`, vclusterAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ScopeValue{
		Group:    groupVal,
		Username: usernameVal,
		Vcluster: vclusterVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewScopeValueNull() ScopeValue {
	return ScopeValue{
		state: attr.ValueStateNull,
	}
}

func NewScopeValueUnknown() ScopeValue {
	return ScopeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewScopeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ScopeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ScopeValue Attribute Value",
				"While creating a ScopeValue value, a missing attribute value was detected. "+
					"A ScopeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ScopeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ScopeValue Attribute Type",
				"While creating a ScopeValue value, an invalid attribute value was detected. "+
					"A ScopeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ScopeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ScopeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ScopeValue Attribute Value",
				"While creating a ScopeValue value, an extra attribute value was detected. "+
					"A ScopeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ScopeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewScopeValueUnknown(), diags
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewScopeValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewScopeValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	vclusterAttribute, ok := attributes["vcluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcluster is missing from object`)

		return NewScopeValueUnknown(), diags
	}

	vclusterVal, ok := vclusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcluster expected to be basetypes.StringValue, was: %T`, vclusterAttribute))
	}

	if diags.HasError() {
		return NewScopeValueUnknown(), diags
	}

	return ScopeValue{
		Group:    groupVal,
		Username: usernameVal,
		Vcluster: vclusterVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewScopeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ScopeValue {
	object, diags := NewScopeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewScopeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ScopeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewScopeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewScopeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewScopeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewScopeValueMust(ScopeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ScopeType) ValueType(ctx context.Context) attr.Value {
	return ScopeValue{}
}

var _ basetypes.ObjectValuable = ScopeValue{}

type ScopeValue struct {
	Group    basetypes.StringValue `tfsdk:"group"`
	Username basetypes.StringValue `tfsdk:"username"`
	Vcluster basetypes.StringValue `tfsdk:"vcluster"`
	state    attr.ValueState
}

func (v ScopeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vcluster"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		val, err = v.Vcluster.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vcluster"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ScopeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ScopeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ScopeValue) String() string {
	return "ScopeValue"
}

func (v ScopeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group":    basetypes.StringType{},
		"username": basetypes.StringType{},
		"vcluster": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group":    v.Group,
			"username": v.Username,
			"vcluster": v.Vcluster,
		})

	return objVal, diags
}

func (v ScopeValue) Equal(o attr.Value) bool {
	other, ok := o.(ScopeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	if !v.Vcluster.Equal(other.Vcluster) {
		return false
	}

	return true
}

func (v ScopeValue) Type(ctx context.Context) attr.Type {
	return ScopeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ScopeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group":    basetypes.StringType{},
		"username": basetypes.StringType{},
		"vcluster": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	commentAttribute, ok := attributes["comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comment is missing from object`)

		return nil, diags
	}

	commentVal, ok := commentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comment expected to be basetypes.StringValue, was: %T`, commentAttribute))
	}

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return nil, diags
	}

	configVal, ok := configAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.ObjectValue, was: %T`, configAttribute))
	}

	pluginClassAttribute, ok := attributes["plugin_class"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plugin_class is missing from object`)

		return nil, diags
	}

	pluginClassVal, ok := pluginClassAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plugin_class expected to be basetypes.StringValue, was: %T`, pluginClassAttribute))
	}

	priorityAttribute, ok := attributes["priority"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`priority is missing from object`)

		return nil, diags
	}

	priorityVal, ok := priorityAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`priority expected to be basetypes.Int64Value, was: %T`, priorityAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Comment:     commentVal,
		Config:      configVal,
		PluginClass: pluginClassVal,
		Priority:    priorityVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	commentAttribute, ok := attributes["comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comment is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	commentVal, ok := commentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comment expected to be basetypes.StringValue, was: %T`, commentAttribute))
	}

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	configVal, ok := configAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.ObjectValue, was: %T`, configAttribute))
	}

	pluginClassAttribute, ok := attributes["plugin_class"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plugin_class is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	pluginClassVal, ok := pluginClassAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plugin_class expected to be basetypes.StringValue, was: %T`, pluginClassAttribute))
	}

	priorityAttribute, ok := attributes["priority"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`priority is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	priorityVal, ok := priorityAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`priority expected to be basetypes.Int64Value, was: %T`, priorityAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Comment:     commentVal,
		Config:      configVal,
		PluginClass: pluginClassVal,
		Priority:    priorityVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Comment     basetypes.StringValue `tfsdk:"comment"`
	Config      basetypes.ObjectValue `tfsdk:"config"`
	PluginClass basetypes.StringValue `tfsdk:"plugin_class"`
	Priority    basetypes.Int64Value  `tfsdk:"priority"`
	state       attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["comment"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["config"] = basetypes.ObjectType{
		AttrTypes: ConfigValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["plugin_class"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["priority"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Comment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["comment"] = val

		val, err = v.Config.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["config"] = val

		val, err = v.PluginClass.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plugin_class"] = val

		val, err = v.Priority.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["priority"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var config basetypes.ObjectValue

	if v.Config.IsNull() {
		config = types.ObjectNull(
			ConfigValue{}.AttributeTypes(ctx),
		)
	}

	if v.Config.IsUnknown() {
		config = types.ObjectUnknown(
			ConfigValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Config.IsNull() && !v.Config.IsUnknown() {
		config = types.ObjectValueMust(
			ConfigValue{}.AttributeTypes(ctx),
			v.Config.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"comment": basetypes.StringType{},
		"config": basetypes.ObjectType{
			AttrTypes: ConfigValue{}.AttributeTypes(ctx),
		},
		"plugin_class": basetypes.StringType{},
		"priority":     basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"comment":      v.Comment,
			"config":       config,
			"plugin_class": v.PluginClass,
			"priority":     v.Priority,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Comment.Equal(other.Comment) {
		return false
	}

	if !v.Config.Equal(other.Config) {
		return false
	}

	if !v.PluginClass.Equal(other.PluginClass) {
		return false
	}

	if !v.Priority.Equal(other.Priority) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"comment": basetypes.StringType{},
		"config": basetypes.ObjectType{
			AttrTypes: ConfigValue{}.AttributeTypes(ctx),
		},
		"plugin_class": basetypes.StringType{},
		"priority":     basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = ConfigType{}

type ConfigType struct {
	basetypes.ObjectType
}

func (t ConfigType) Equal(o attr.Type) bool {
	other, ok := o.(ConfigType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConfigType) String() string {
	return "ConfigType"
}

func (t ConfigType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enableAuditLogOnErrorAttribute, ok := attributes["enable_audit_log_on_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enable_audit_log_on_error is missing from object`)

		return nil, diags
	}

	enableAuditLogOnErrorVal, ok := enableAuditLogOnErrorAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enable_audit_log_on_error expected to be basetypes.BoolValue, was: %T`, enableAuditLogOnErrorAttribute))
	}

	externalStorageAttribute, ok := attributes["external_storage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`external_storage is missing from object`)

		return nil, diags
	}

	externalStorageVal, ok := externalStorageAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`external_storage expected to be basetypes.BoolValue, was: %T`, externalStorageAttribute))
	}

	schemaDataModeAttribute, ok := attributes["schema_data_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_data_mode is missing from object`)

		return nil, diags
	}

	schemaDataModeVal, ok := schemaDataModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_data_mode expected to be basetypes.StringValue, was: %T`, schemaDataModeAttribute))
	}

	schemaRegistryConfigAttribute, ok := attributes["schema_registry_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_registry_config is missing from object`)

		return nil, diags
	}

	schemaRegistryConfigVal, ok := schemaRegistryConfigAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_registry_config expected to be basetypes.MapValue, was: %T`, schemaRegistryConfigAttribute))
	}

	topicAttribute, ok := attributes["topic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topic is missing from object`)

		return nil, diags
	}

	topicVal, ok := topicAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topic expected to be basetypes.StringValue, was: %T`, topicAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConfigValue{
		EnableAuditLogOnError: enableAuditLogOnErrorVal,
		ExternalStorage:       externalStorageVal,
		SchemaDataMode:        schemaDataModeVal,
		SchemaRegistryConfig:  schemaRegistryConfigVal,
		Topic:                 topicVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewConfigValueNull() ConfigValue {
	return ConfigValue{
		state: attr.ValueStateNull,
	}
}

func NewConfigValueUnknown() ConfigValue {
	return ConfigValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConfigValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConfigValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConfigValue Attribute Value",
				"While creating a ConfigValue value, a missing attribute value was detected. "+
					"A ConfigValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConfigValue Attribute Type",
				"While creating a ConfigValue value, an invalid attribute value was detected. "+
					"A ConfigValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConfigValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConfigValue Attribute Value",
				"While creating a ConfigValue value, an extra attribute value was detected. "+
					"A ConfigValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConfigValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConfigValueUnknown(), diags
	}

	enableAuditLogOnErrorAttribute, ok := attributes["enable_audit_log_on_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enable_audit_log_on_error is missing from object`)

		return NewConfigValueUnknown(), diags
	}

	enableAuditLogOnErrorVal, ok := enableAuditLogOnErrorAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enable_audit_log_on_error expected to be basetypes.BoolValue, was: %T`, enableAuditLogOnErrorAttribute))
	}

	externalStorageAttribute, ok := attributes["external_storage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`external_storage is missing from object`)

		return NewConfigValueUnknown(), diags
	}

	externalStorageVal, ok := externalStorageAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`external_storage expected to be basetypes.BoolValue, was: %T`, externalStorageAttribute))
	}

	schemaDataModeAttribute, ok := attributes["schema_data_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_data_mode is missing from object`)

		return NewConfigValueUnknown(), diags
	}

	schemaDataModeVal, ok := schemaDataModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_data_mode expected to be basetypes.StringValue, was: %T`, schemaDataModeAttribute))
	}

	schemaRegistryConfigAttribute, ok := attributes["schema_registry_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_registry_config is missing from object`)

		return NewConfigValueUnknown(), diags
	}

	schemaRegistryConfigVal, ok := schemaRegistryConfigAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_registry_config expected to be basetypes.MapValue, was: %T`, schemaRegistryConfigAttribute))
	}

	topicAttribute, ok := attributes["topic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topic is missing from object`)

		return NewConfigValueUnknown(), diags
	}

	topicVal, ok := topicAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topic expected to be basetypes.StringValue, was: %T`, topicAttribute))
	}

	if diags.HasError() {
		return NewConfigValueUnknown(), diags
	}

	return ConfigValue{
		EnableAuditLogOnError: enableAuditLogOnErrorVal,
		ExternalStorage:       externalStorageVal,
		SchemaDataMode:        schemaDataModeVal,
		SchemaRegistryConfig:  schemaRegistryConfigVal,
		Topic:                 topicVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewConfigValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConfigValue {
	object, diags := NewConfigValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConfigValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConfigType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConfigValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConfigValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConfigValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConfigValueMust(ConfigValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConfigType) ValueType(ctx context.Context) attr.Value {
	return ConfigValue{}
}

var _ basetypes.ObjectValuable = ConfigValue{}

type ConfigValue struct {
	EnableAuditLogOnError basetypes.BoolValue   `tfsdk:"enable_audit_log_on_error"`
	ExternalStorage       basetypes.BoolValue   `tfsdk:"external_storage"`
	SchemaDataMode        basetypes.StringValue `tfsdk:"schema_data_mode"`
	SchemaRegistryConfig  basetypes.MapValue    `tfsdk:"schema_registry_config"`
	Topic                 basetypes.StringValue `tfsdk:"topic"`
	state                 attr.ValueState
}

func (v ConfigValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["enable_audit_log_on_error"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["external_storage"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["schema_data_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["schema_registry_config"] = basetypes.MapType{
		ElemType: SchemaRegistryConfigValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["topic"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.EnableAuditLogOnError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enable_audit_log_on_error"] = val

		val, err = v.ExternalStorage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["external_storage"] = val

		val, err = v.SchemaDataMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schema_data_mode"] = val

		val, err = v.SchemaRegistryConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schema_registry_config"] = val

		val, err = v.Topic.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["topic"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConfigValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConfigValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConfigValue) String() string {
	return "ConfigValue"
}

func (v ConfigValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	schemaRegistryConfig := types.MapValueMust(
		SchemaRegistryConfigType{
			basetypes.ObjectType{
				AttrTypes: SchemaRegistryConfigValue{}.AttributeTypes(ctx),
			},
		},
		v.SchemaRegistryConfig.Elements(),
	)

	if v.SchemaRegistryConfig.IsNull() {
		schemaRegistryConfig = types.MapNull(
			SchemaRegistryConfigType{
				basetypes.ObjectType{
					AttrTypes: SchemaRegistryConfigValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.SchemaRegistryConfig.IsUnknown() {
		schemaRegistryConfig = types.MapUnknown(
			SchemaRegistryConfigType{
				basetypes.ObjectType{
					AttrTypes: SchemaRegistryConfigValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"enable_audit_log_on_error": basetypes.BoolType{},
		"external_storage":          basetypes.BoolType{},
		"schema_data_mode":          basetypes.StringType{},
		"schema_registry_config": basetypes.MapType{
			ElemType: SchemaRegistryConfigValue{}.Type(ctx),
		},
		"topic": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enable_audit_log_on_error": v.EnableAuditLogOnError,
			"external_storage":          v.ExternalStorage,
			"schema_data_mode":          v.SchemaDataMode,
			"schema_registry_config":    schemaRegistryConfig,
			"topic":                     v.Topic,
		})

	return objVal, diags
}

func (v ConfigValue) Equal(o attr.Value) bool {
	other, ok := o.(ConfigValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.EnableAuditLogOnError.Equal(other.EnableAuditLogOnError) {
		return false
	}

	if !v.ExternalStorage.Equal(other.ExternalStorage) {
		return false
	}

	if !v.SchemaDataMode.Equal(other.SchemaDataMode) {
		return false
	}

	if !v.SchemaRegistryConfig.Equal(other.SchemaRegistryConfig) {
		return false
	}

	if !v.Topic.Equal(other.Topic) {
		return false
	}

	return true
}

func (v ConfigValue) Type(ctx context.Context) attr.Type {
	return ConfigType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConfigValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enable_audit_log_on_error": basetypes.BoolType{},
		"external_storage":          basetypes.BoolType{},
		"schema_data_mode":          basetypes.StringType{},
		"schema_registry_config": basetypes.MapType{
			ElemType: SchemaRegistryConfigValue{}.Type(ctx),
		},
		"topic": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SchemaRegistryConfigType{}

type SchemaRegistryConfigType struct {
	basetypes.ObjectType
}

func (t SchemaRegistryConfigType) Equal(o attr.Type) bool {
	other, ok := o.(SchemaRegistryConfigType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SchemaRegistryConfigType) String() string {
	return "SchemaRegistryConfigType"
}

func (t SchemaRegistryConfigType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	additionalConfigsAttribute, ok := attributes["additional_configs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_configs is missing from object`)

		return nil, diags
	}

	additionalConfigsVal, ok := additionalConfigsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_configs expected to be basetypes.MapValue, was: %T`, additionalConfigsAttribute))
	}

	cacheSizeAttribute, ok := attributes["cache_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cache_size is missing from object`)

		return nil, diags
	}

	cacheSizeVal, ok := cacheSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cache_size expected to be basetypes.Int64Value, was: %T`, cacheSizeAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return nil, diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SchemaRegistryConfigValue{
		AdditionalConfigs: additionalConfigsVal,
		CacheSize:         cacheSizeVal,
		Host:              hostVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewSchemaRegistryConfigValueNull() SchemaRegistryConfigValue {
	return SchemaRegistryConfigValue{
		state: attr.ValueStateNull,
	}
}

func NewSchemaRegistryConfigValueUnknown() SchemaRegistryConfigValue {
	return SchemaRegistryConfigValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSchemaRegistryConfigValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SchemaRegistryConfigValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SchemaRegistryConfigValue Attribute Value",
				"While creating a SchemaRegistryConfigValue value, a missing attribute value was detected. "+
					"A SchemaRegistryConfigValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaRegistryConfigValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SchemaRegistryConfigValue Attribute Type",
				"While creating a SchemaRegistryConfigValue value, an invalid attribute value was detected. "+
					"A SchemaRegistryConfigValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaRegistryConfigValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SchemaRegistryConfigValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SchemaRegistryConfigValue Attribute Value",
				"While creating a SchemaRegistryConfigValue value, an extra attribute value was detected. "+
					"A SchemaRegistryConfigValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SchemaRegistryConfigValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSchemaRegistryConfigValueUnknown(), diags
	}

	additionalConfigsAttribute, ok := attributes["additional_configs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_configs is missing from object`)

		return NewSchemaRegistryConfigValueUnknown(), diags
	}

	additionalConfigsVal, ok := additionalConfigsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_configs expected to be basetypes.MapValue, was: %T`, additionalConfigsAttribute))
	}

	cacheSizeAttribute, ok := attributes["cache_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cache_size is missing from object`)

		return NewSchemaRegistryConfigValueUnknown(), diags
	}

	cacheSizeVal, ok := cacheSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cache_size expected to be basetypes.Int64Value, was: %T`, cacheSizeAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return NewSchemaRegistryConfigValueUnknown(), diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	if diags.HasError() {
		return NewSchemaRegistryConfigValueUnknown(), diags
	}

	return SchemaRegistryConfigValue{
		AdditionalConfigs: additionalConfigsVal,
		CacheSize:         cacheSizeVal,
		Host:              hostVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewSchemaRegistryConfigValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SchemaRegistryConfigValue {
	object, diags := NewSchemaRegistryConfigValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSchemaRegistryConfigValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SchemaRegistryConfigType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSchemaRegistryConfigValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSchemaRegistryConfigValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSchemaRegistryConfigValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSchemaRegistryConfigValueMust(SchemaRegistryConfigValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SchemaRegistryConfigType) ValueType(ctx context.Context) attr.Value {
	return SchemaRegistryConfigValue{}
}

var _ basetypes.ObjectValuable = SchemaRegistryConfigValue{}

type SchemaRegistryConfigValue struct {
	AdditionalConfigs basetypes.MapValue    `tfsdk:"additional_configs"`
	CacheSize         basetypes.Int64Value  `tfsdk:"cache_size"`
	Host              basetypes.StringValue `tfsdk:"host"`
	state             attr.ValueState
}

func (v SchemaRegistryConfigValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["additional_configs"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["cache_size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["host"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AdditionalConfigs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["additional_configs"] = val

		val, err = v.CacheSize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cache_size"] = val

		val, err = v.Host.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["host"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SchemaRegistryConfigValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SchemaRegistryConfigValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SchemaRegistryConfigValue) String() string {
	return "SchemaRegistryConfigValue"
}

func (v SchemaRegistryConfigValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additionalConfigsVal basetypes.MapValue
	switch {
	case v.AdditionalConfigs.IsUnknown():
		additionalConfigsVal = types.MapUnknown(types.StringType)
	case v.AdditionalConfigs.IsNull():
		additionalConfigsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		additionalConfigsVal, d = types.MapValue(types.StringType, v.AdditionalConfigs.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"additional_configs": basetypes.MapType{
				ElemType: types.StringType,
			},
			"cache_size": basetypes.Int64Type{},
			"host":       basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"additional_configs": basetypes.MapType{
			ElemType: types.StringType,
		},
		"cache_size": basetypes.Int64Type{},
		"host":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"additional_configs": additionalConfigsVal,
			"cache_size":         v.CacheSize,
			"host":               v.Host,
		})

	return objVal, diags
}

func (v SchemaRegistryConfigValue) Equal(o attr.Value) bool {
	other, ok := o.(SchemaRegistryConfigValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdditionalConfigs.Equal(other.AdditionalConfigs) {
		return false
	}

	if !v.CacheSize.Equal(other.CacheSize) {
		return false
	}

	if !v.Host.Equal(other.Host) {
		return false
	}

	return true
}

func (v SchemaRegistryConfigValue) Type(ctx context.Context) attr.Type {
	return SchemaRegistryConfigType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SchemaRegistryConfigValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"additional_configs": basetypes.MapType{
			ElemType: types.StringType,
		},
		"cache_size": basetypes.Int64Type{},
		"host":       basetypes.StringType{},
	}
}
